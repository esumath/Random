[{"name":"app.R","content":"library(shiny)\r\nlibrary(markdown)\r\nlibrary(DT)\r\nlibrary(plotly)\r\nlibrary(dplyr)\r\nlibrary(ggplot2)\r\n# remove all reset buttons\r\n# Add random number generator\r\n\r\nnumericNames <- function(data) {\r\n  vnames<-colnames(data)\r\n  vtypes <- vapply(data, class, character(1))\r\n  data_vars<-data.frame(vnames = vnames, vtypes = vtypes, stringsAsFactors = FALSE)\r\n  data_vars <- data_vars[data_vars$vtypes == \"numeric\" | data_vars$vtypes == \"integer\", ]\r\n  vnames <- data_vars$vnames\r\n  return(vnames)\r\n}\r\ncategoricNames <- function(data) {\r\n  vnames<-colnames(data)\r\n  vtypes <- vapply(data, class, character(1))\r\n  data_vars<-data.frame(vnames = vnames, vtypes = vtypes, stringsAsFactors = FALSE)\r\n  data_vars <- data_vars[data_vars$vtypes == \"factor\" | data_vars$vtypes == \"character\", ]\r\n  vnames <- data_vars$vnames\r\n  return(vnames)\r\n}\r\n\r\nui <- fluidPage(\r\n  tags$style(HTML(\"\r\n    /* Custom CSS to reduce space between elements */\r\n    .plotly .plotly.js-plotly-plot {\r\n        margin-top: -30px; /* Adjust this value as needed */\r\n    }\r\n  \")),\r\n  tags$style(HTML(\"\r\n    /* Custom CSS to reduce space above the table */\r\n    .my-table-class {\r\n        margin-top: 30px; /* Adjust this value as needed */\r\n    }\r\n\")),\r\n  \r\n  titlePanel(\"Random Sampling Web App - Innovative Teacher Prep2Practice Mathmatics Group\"),\r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      conditionalPanel(\r\n        condition = \"input.tabs_data != 'Data Analysis'\",\r\n        radioButtons(\"data_option\", \"Sampling options:\",\r\n                     choices = c(\"Upload a CSV File\", \"Random Number Generator\")),\r\n        conditionalPanel(\r\n          condition = \"input.data_option == 'Upload a CSV File'\",\r\n          fileInput(\"csv_input\", \"Step 1: Upload your CSV file\"),\r\n          checkboxInput(\"header_option\", \"The CSV File Contains Header\", value = TRUE),\r\n          numericInput(\"sample_size_1\", \"Step 2: Choose your sample size\", value = 1),\r\n          radioButtons(\"Sampling_methods\", \"Step 3: Choose a sampling method\",\r\n                       choices = c(\"Random Sampling\", \"Non-random Sampling\")),\r\n          conditionalPanel(\r\n            condition = \"input.Sampling_methods == 'Random Sampling'\",\r\n            helpText(HTML(\"<strong>and conduct sampling<\/strong>\")),\r\n            actionButton(\"sample_button1\", \"Sample\", icon = icon(\"refresh\"), class = \"btn btn-primary\"),\r\n            HTML(\"<div style='width: 30px; display: inline-block;'><\/div>\")  # Adjust space\r\n          ),\r\n          conditionalPanel(\r\n            condition = \"input.Sampling_methods == 'Non-random Sampling'\",\r\n            radioButtons(\"nonrandom_types\", \"Choose a random sample from a specific group determined by\",\r\n                         choices = c(\"a categorical variable\", \"a numerical variable\")),\r\n            conditionalPanel(\r\n              condition = \"input.nonrandom_types == 'a categorical variable'\",\r\n              selectizeInput(\"nonrandom_catvar\", label = \"Select a categorical variable\", \r\n                             choices = NULL,  multiple = FALSE),\r\n              selectizeInput(\"catlevel\", label = \"with level =\", \r\n                             choices = NULL, multiple = FALSE)\r\n            ),\r\n            conditionalPanel(\r\n              condition = \"input.nonrandom_types == 'a numerical variable'\",\r\n              selectizeInput(\"nonrandom_numvar\", label = \"Select a numerican variable\", \r\n                             choices = NULL,  multiple = FALSE),\r\n              numericInput(\"lower\", \"between (inclusive)\",\r\n                           value = 1,  step = 1),\r\n              numericInput(\"upper\", \"and (inclusive)\",\r\n                           value = 100,  step = 1)\r\n            ),\r\n            helpText(HTML(\"<strong>Then conduct sampling<\/strong>\")),\r\n            actionButton(\"nonrandom_sample_button\", \"Sample\", icon = icon(\"refresh\"), class = \"btn btn-primary\"),\r\n            HTML(\"<div style='width: 30px; display: inline-block;'><\/div>\"),  # Adjust space\r\n          ),\r\n          #br(),\r\n          #actionButton(\"reset_button1\", \"Reset\", icon = icon(\"trash\"), class = \"btn btn-danger\"),\r\n          helpText(HTML(\"<strong>Step 4: Compare the sample data with the population data<\/strong>\")),\r\n          actionButton(\"JumpToAnalysis\", 'Data Analysis', icon = icon(\"long-arrow-alt-right\"), class =\"btn btn-danger\"),\r\n          helpText(HTML(\"<strong>Step 5: You may download the sample data for further analysis<\/strong>\")),\r\n          downloadButton(\"download_sampled_data\", \"Download Sampled Data\", class = \"btn btn-primary\")\r\n        ),\r\n        conditionalPanel(\r\n          condition = \"input.data_option == 'Random Number Generator'\",\r\n          numericInput(\"sample_size_2\", \"Choose your sample size\", value = 50),\r\n          numericInput(\"rangeStart\",  \"Range Start\",   1),\r\n          numericInput(\"rangeEnd\",   \"Range End\",  1000),\r\n          helpText(HTML(\"<strong>Generate random numbers without replacement<\/strong>\")),\r\n          actionButton(\"sample_button2\", \"Sample\", icon = icon(\"refresh\"), class = \"btn btn-primary\"),\r\n          #HTML(\"<div style='width: 30px; display: inline-block;'><\/div>\"),  # Adjust space\r\n          #actionButton(\"reset_button2\", \"Reset\", icon = icon(\"trash\"), class = \"btn btn-danger\"),\r\n          helpText(HTML(\"<strong>You can download the generated random numbers<\/strong>\")),\r\n          downloadButton(\"download_sampled_integers\", \"Download Random Numbers\", class = \"btn btn-primary\")\r\n        )\r\n      ),\r\n      conditionalPanel(\r\n        condition = \"input.tabs_data == 'Data Analysis'\",\r\n        helpText(HTML(\"<strong>Do you need data transformation?<\/strong>\")),\r\n        checkboxInput(\"Transformation\", \"Data Transformation\"),\r\n        conditionalPanel(\r\n          condition = \"input.Transformation == true\",\r\n          selectizeInput(\"trans\", label = \"Choose Transformation\", \r\n                         choices = c(\"To Categorical\" = \"categorical\", \r\n                                     \"To Numeric\" = \"numeric\"), \r\n                         multiple = FALSE),\r\n          selectizeInput(\"var_trans\", label = \"Select a variable\", \r\n                         choices = NULL,  multiple = FALSE),\r\n          actionButton(\"savetrans\", label=\"Save transformation\", \r\n                       icon = icon(\"save\"), class = \"btn btn-primary\")\r\n        ),\r\n        br(),\r\n        radioButtons(\"variable_option\", \"Type of Analysis:\",\r\n                     choices = c(\"Numerical Data Analysis\", \"Categorical Data Analysis\")),\r\n        conditionalPanel(\r\n          condition = \"input.variable_option == 'Numerical Data Analysis'\",\r\n          selectizeInput(\"numvar\", label = \"Select a numerical variable\", \r\n                         choices = NULL, multiple = FALSE),\r\n          radioButtons(\"numstatistics\", label = \"Statistics and Plots\", \r\n                       choices = c(\"Descriptive Statistics\",\r\n                                   \"Box plot\",\r\n                                   \"Histogram\") \r\n          )\r\n        ),\r\n        conditionalPanel(\r\n          condition = \"input.variable_option == 'Categorical Data Analysis'\",\r\n          selectizeInput(\"catvar\", label = \"Select a categorical variable\", \r\n                         choices = NULL, multiple = FALSE),\r\n          radioButtons(\"catstatistics\", label = \"Statistics and Plots\", \r\n                       choices = c(\"Frequency Table\",\r\n                                   \"Bar Chart\",\r\n                                   \"Pie Chart\") \r\n          )\r\n        )\r\n      )\r\n    ),\r\n    \r\n    \r\n    mainPanel(\r\n      \r\n      tabsetPanel(id = \"tabs_data\", type = \"tabs\",\r\n                  tabPanel(\"About\", includeMarkdown(\"about.md\")),\r\n                  tabPanel(\"Population Data\", dataTableOutput(\"display_data\")),\r\n                  tabPanel(\"Sampled Data\", \r\n                           br(),\r\n                           htmlOutput(\"warning\"),\r\n                           dataTableOutput(\"sampled_data\")\r\n                  ),\r\n                  tabPanel(\"Data Analysis\", \r\n                           hr(),\r\n                           tags$b(\"Comparison of Population Data and Sampled Data:\"),\r\n                           conditionalPanel(\r\n                             condition = \"input.variable_option == 'Numerical Data Analysis'\",\r\n                             tableOutput(\"descriptive_statistics\"),\r\n                             div(style = \"margin-top: 40px;\", plotlyOutput(\"boxplot\")),\r\n                             div(style = \"margin-top: -400px;\", plotlyOutput(\"histogram\"))\r\n                           ),\r\n                           conditionalPanel(\r\n                             condition = \"input.variable_option == 'Categorical Data Analysis' \",\r\n                             div(tableOutput(\"frequency_table1\"), class = \"my-table-class\"), \r\n                             div(tableOutput(\"frequency_table2\"), class = \"my-table-class\"), \r\n                             div(tableOutput(\"frequency_table\"), class = \"my-table-class\"),  \r\n                             plotlyOutput(\"bar_chart_population\"),\r\n                             plotlyOutput(\"bar_chart_sample\"),\r\n                             div(style = \"margin-top: -790px;\", plotlyOutput(\"pie_chart_population\")),\r\n                             div(style = \"margin-top: -10px;\", plotlyOutput(\"pie_chart_sample\"))\r\n                           )        \r\n                  )\r\n                  \r\n      )\r\n    )   #main panel ends\r\n    \r\n  )\r\n)   #UI ends\r\n\r\n\r\n\r\n\r\nserver <- function(input, output, session) {\r\n  \r\n  \r\n  #input$data_option == \"Upload a CSV File\",\r\n  observeEvent(input$csv_input, {\r\n    updateTabsetPanel(session, \"tabs_data\", selected = \"Population Data\")\r\n  })\r\n  \r\n  observeEvent(input$data_option == \"Random Number Generator\", {\r\n    updateTabsetPanel(session, \"tabs_data\", selected = \"Population Data\")\r\n  })\r\n  \r\n  observe({\r\n    updateTabsetPanel(session, \"tabs_data\", selected = \"About\")\r\n  })\r\n  \r\n  \r\n  ## Step 1: Data upload/entry, population data  \r\n  pop_data <- function() {\r\n    if (input$data_option == \"Upload a CSV File\") {\r\n      req(input$csv_input)\r\n      inFile <- input$csv_input\r\n      if (is.null(inFile))  return(NULL)\r\n      df <- read.csv(inFile$datapath, header = input$header_option)\r\n    } else if (input$data_option == \"Random Number Generator\") {\r\n      datarange = seq(input$rangeStart:input$rangeEnd)\r\n      integers=datarange\r\n      #integers <- unlist(strsplit(input$integer_input, \",\"))\r\n      df = data.frame(Numbers = integers)\r\n    }\r\n    \r\n    return(df)\r\n  }\r\n  \r\n  \r\n  ## Reactive values store population data and sampled data  \r\n  values <- reactiveValues(dataset1 = NULL, dataset2 = NULL)\r\n  \r\n  observe({\r\n    input_data <- pop_data()  # Isolate input data\r\n    values$dataset1 <- if (!is.null(input_data)) input_data \r\n  })\r\n  \r\n  #population data:\r\n  uploaded_data <- reactive({\r\n    values$dataset1%>%as.data.frame() \r\n  })\r\n  \r\n  \r\n  output$display_data <- renderDataTable({\r\n    uploaded_data()%>%as.data.frame()\r\n  })\r\n  \r\n  \r\n  ## Step 2: obtain names of numerical and categorical variables\r\n  \r\n  R.numericnames <- reactive({\r\n    if (is.null(uploaded_data())) return(NULL)\r\n    return(numericNames(uploaded_data()))\r\n  })\r\n  \r\n  R.categoricnames <- reactive({\r\n    if (is.null(uploaded_data())) return(NULL)\r\n    return(categoricNames(uploaded_data()))\r\n  }) \r\n  \r\n  \r\n  observe({\r\n    updateSelectizeInput(session, \"numvar\", \r\n                         choices = c( R.numericnames())  )\r\n    updateSelectizeInput(session, \"nonrandom_numvar\", \r\n                         choices = c( R.numericnames())  )\r\n    updateSelectizeInput(session, \"catvar\", \r\n                         choices = c( R.categoricnames()  ))\r\n    updateSelectizeInput(session, \"nonrandom_catvar\", \r\n                         choices = c( R.categoricnames()  ))\r\n  })\r\n  \r\n  \r\n  #categorical variable levels\r\n  observe({\r\n    req(input$nonrandom_catvar)\r\n    req(uploaded_data())\r\n    \r\n    variable =  uploaded_data()[[input$nonrandom_catvar]]\r\n    \r\n    if (!is.factor(variable)) {\r\n      variable <- as.factor(variable)\r\n    }\r\n    \r\n    lvls = levels(variable) \r\n    updateSelectInput(session, \"catlevel\", choices = lvls)\r\n  })\r\n  \r\n  \r\n  \r\n  #sampling of a data frame from the csv file\r\n  sampling1 <- function() {\r\n    req(uploaded_data())\r\n    data <- uploaded_data()\r\n    if (input$sample_size_1 <= nrow(data))\r\n      sample_data <- data[sample(nrow(data), input$sample_size_1), , drop = FALSE]\r\n    else sample_data <-data.frame()\r\n    return(sample_data)\r\n  }\r\n  \r\n  observeEvent(input$sample_button1,{\r\n    samplingdata <- sampling1()\r\n    values$dataset2 <- if (!is.null(samplingdata)) samplingdata\r\n    updateTabsetPanel(session, \"tabs_data\",\r\n                      selected = \"Sampled Data\")\r\n  })\r\n  \r\n  \r\n  \r\n  ### Non-random Sampling\r\n  ###  based on a categorical variable\r\n  ### and a numerical variable\r\n  \r\n  nonrandom_sampling <- function() {\r\n    req(uploaded_data())\r\n    Data <- uploaded_data()\r\n    \r\n    if (input$nonrandom_types == \"a categorical variable\") {\r\n      if (!is.factor(Data[[input$nonrandom_catvar]])) {\r\n        Data[[input$nonrandom_catvar]] <- as.factor(Data[[input$nonrandom_catvar]])\r\n      }\r\n      \r\n      # Filter data based on a specific category level\r\n      data <- Data %>% dplyr::filter(!!sym(input$nonrandom_catvar) == input$catlevel)\r\n      ##data <- Data%>%dplyr::filter(input$nonrandom_catvar==input$catlevel)\r\n      \r\n      # Sample from the filtered data\r\n      if (input$sample_size_1 <= nrow(data))\r\n        nonrandom_data <- data[sample(nrow(data), input$sample_size_1), , drop = FALSE]\r\n      else nonrandom_data <-data.frame()\r\n    } else if (input$nonrandom_types == \"a numerical variable\") {\r\n      # Filter data based on the range of the numerical variable\r\n      data <- Data %>% dplyr::filter(.data[[input$nonrandom_numvar]] >= input$lower & .data[[input$nonrandom_numvar]] <= input$upper)\r\n      \r\n      # Sample from the filtered data\r\n      \r\n      if (input$sample_size_1 <= nrow(data))\r\n        nonrandom_data <- data[sample(nrow(data), input$sample_size_1), , drop = FALSE]\r\n      else nonrandom_data <-data.frame()\r\n    }\r\n    return(nonrandom_data)\r\n  }\r\n  \r\n  observeEvent(input$nonrandom_sample_button, {\r\n    sampled_data <- nonrandom_sampling()\r\n    values$dataset2 <- if (!is.null(sampled_data)) sampled_data\r\n    updateTabsetPanel(session, \"tabs_data\",\r\n                      selected = \"Sampled Data\")\r\n  })\r\n  \r\n  \r\n  sampled_data1 <- reactive({\r\n    values$dataset2 \r\n  })       #sampled data for output\r\n  \r\n  \r\n  #sampling of a sequence of integer\r\n  # A different method is used\r\n  sampled_data2 <- reactiveVal(NULL)\r\n  observeEvent(input$sample_button2, {\r\n    req(uploaded_data())\r\n    data <- uploaded_data()\r\n    \r\n    if (input$sample_size_2 <=nrow(data)){\r\n      sample_indices <- sample(nrow(data), input$sample_size_2)\r\n      sample_data <- data[sample_indices, , drop = FALSE]\r\n    } else  sample_data=as.data.frame()\r\n    \r\n    sampled_data2(sample_data)\r\n    \r\n    updateTabsetPanel(session, \"tabs_data\",\r\n                      selected = \"Sampled Data\")\r\n  })\r\n  \r\n  output$sampled_data <- renderDataTable({\r\n    if (input$data_option == \"Upload a CSV File\") {\r\n      sampled_data1()\r\n    } else if (input$data_option == \"Random Number Generator\") {\r\n      sampled_data2()\r\n    }\r\n  })\r\n  \r\n  output$download_sampled_data <- downloadHandler(\r\n    filename = function() {\r\n      \"sampled_data.csv\"\r\n    },\r\n    content = function(file) {\r\n      write.csv(sampled_data1(), file, row.names = FALSE)\r\n    }\r\n  )\r\n  \r\n  output$download_sampled_integers <- downloadHandler(\r\n    filename = function() {\r\n      \"sampled_integers.csv\"\r\n    },\r\n    content = function(file) {\r\n      write.csv(sampled_data2(), file, row.names = FALSE)\r\n      #writeLines(as.character(unlist(sampled_data2()$Numbers)), file)\r\n    }\r\n  )\r\n  \r\n  \r\n  #observeEvent(input$reset_button1, {\r\n  #  values$dataset2=NULL\r\n  #    })\r\n  \r\n  #observeEvent(input$reset_button2, {\r\n  #  sampled_data2(NULL)\r\n  #})\r\n  \r\n  observeEvent(input$JumpToAnalysis, {\r\n    updateTabsetPanel(session, \"tabs_data\",\r\n                      selected = \"Data Analysis\")\r\n  })\r\n  \r\n  \r\n  #descriptive statistics for numerical data\r\n  output$descriptive_statistics <- renderTable({\r\n    \r\n    req(input$variable_option, uploaded_data())\r\n    stats_names <- c(\"Min\", \"1st Qu.\", \"Median\", \"Mean\", \"3rd Qu.\", \"Max\", \"Std. Dev.\")\r\n    \r\n    if (input$variable_option == \"Numerical Data Analysis\") {\r\n      if (input$numstatistics == \"Descriptive Statistics\") {\r\n        \r\n        original_data_stats <- c(\r\n          min(uploaded_data()[[input$numvar]], na.rm = TRUE),\r\n          quantile(uploaded_data()[[input$numvar]], probs = 0.25, na.rm = TRUE),\r\n          median(uploaded_data()[[input$numvar]], na.rm = TRUE),\r\n          mean(uploaded_data()[[input$numvar]], na.rm = TRUE),\r\n          quantile(uploaded_data()[[input$numvar]], probs = 0.75, na.rm = TRUE),\r\n          max(uploaded_data()[[input$numvar]], na.rm = TRUE),\r\n          sd(uploaded_data()[[input$numvar]], na.rm = TRUE)\r\n        )\r\n        \r\n        if (input$data_option==\"Random Number Generator\"){\r\n          sampled_data_stats <- c(\r\n            min(sampled_data2()[[input$numvar]], na.rm = TRUE),\r\n            quantile(sampled_data2()[[input$numvar]], probs = 0.25, na.rm = TRUE),\r\n            median(sampled_data2()[[input$numvar]], na.rm = TRUE),\r\n            mean(sampled_data2()[[input$numvar]], na.rm = TRUE),\r\n            quantile(sampled_data2()[[input$numvar]], probs = 0.75, na.rm = TRUE),\r\n            max(sampled_data2()[[input$numvar]], na.rm = TRUE),\r\n            sd(sampled_data2()[[input$numvar]], na.rm = TRUE)\r\n          )\r\n        } else{\r\n          sampled_data_stats <- c(\r\n            min(sampled_data1()[[input$numvar]], na.rm = TRUE),\r\n            quantile(sampled_data1()[[input$numvar]], probs = 0.25, na.rm = TRUE),\r\n            median(sampled_data1()[[input$numvar]], na.rm = TRUE),\r\n            mean(sampled_data1()[[input$numvar]], na.rm = TRUE),\r\n            quantile(sampled_data1()[[input$numvar]], probs = 0.75, na.rm = TRUE),\r\n            max(sampled_data1()[[input$numvar]], na.rm = TRUE),\r\n            sd(sampled_data1()[[input$numvar]], na.rm = TRUE)\r\n          )\r\n        }\r\n        \r\n        statistics_data <- data.frame(\r\n          Statistics = stats_names,\r\n          Population = original_data_stats,\r\n          Sample = sampled_data_stats\r\n        )\r\n        \r\n        return(statistics_data)\r\n      }\r\n    }\r\n    NULL\r\n  }) \r\n  \r\n  \r\n  #box plots:\r\n  output$boxplot <- renderPlotly({\r\n    req(input$variable_option, uploaded_data())\r\n    \r\n    if (input$variable_option == \"Numerical Data Analysis\" && input$numstatistics == \"Box plot\") {\r\n      if (input$data_option==\"Random Number Generator\")\r\n      {\r\n        ggplot_data <- rbind(\r\n          data.frame(Data = \"Population\", Value = uploaded_data()[[input$numvar]]),\r\n          data.frame(Data = \"Sample\", Value = sampled_data2()[[input$numvar]])\r\n        )\r\n        \r\n      }else{\r\n        ggplot_data <- rbind(\r\n          data.frame(Data = \"Population\", Value = uploaded_data()[[input$numvar]]),\r\n          data.frame(Data = \"Sample\", Value = sampled_data1()[[input$numvar]])\r\n        )\r\n        \r\n      }\r\n      \r\n      # Creating an interactive box plot using Plotly\r\n      plot_ly(ggplot_data, x = ~Data, y = ~Value, type = \"box\", color = ~Data) %>%\r\n        layout(title = \"Boxplot Comparison\", xaxis = list(title = \"Data\"), yaxis = list(title = \"Value\"))\r\n    }\r\n  })\r\n  \r\n  \r\n  #histograms\r\n  output$histogram <- renderPlotly({\r\n    req(input$variable_option, uploaded_data())\r\n    \r\n    if (input$variable_option == \"Numerical Data Analysis\" && input$numstatistics == \"Histogram\") {\r\n      if (input$data_option==\"Random Number Generator\"){\r\n        ggplot_data <- rbind(\r\n          data.frame(Data = \"Population\", Value = uploaded_data()[[input$numvar]]),\r\n          data.frame(Data = \"Sample\", Value = sampled_data2()[[input$numvar]])\r\n        )\r\n      }else{\r\n        ggplot_data <- rbind(\r\n          data.frame(Data = \"Population\", Value = uploaded_data()[[input$numvar]]),\r\n          data.frame(Data = \"Sample\", Value = sampled_data1()[[input$numvar]])\r\n        )\r\n      }\r\n      \r\n      # Creating an interactive histogram using Plotly\r\n      plot_ly(ggplot_data, x = ~Value, type = \"histogram\", color = ~Data) %>%\r\n        layout(title = \"Histogram Comparison\", \r\n               xaxis = list(title = \"Value\"), yaxis = list(title = \"Frequency\")\r\n        )\r\n    }\r\n  })\r\n  \r\n  \r\n  Table_freq=function(){\r\n    freq_table_uploaded <- table(uploaded_data()[[input$catvar]])\r\n    rel_freq_table_uploaded <- prop.table(freq_table_uploaded)\r\n    \r\n    freq_table_sampled <- table(sampled_data1()[[input$catvar]])\r\n    rel_freq_table_sampled <- prop.table(freq_table_sampled)\r\n    \r\n    table_uploaded <- data.frame(\r\n      Categories = names(freq_table_uploaded),\r\n      Popn_Freq = as.numeric(freq_table_uploaded),\r\n      Popn_Rel_Freq = as.numeric(rel_freq_table_uploaded)\r\n    )\r\n    \r\n    table_sampled <- data.frame(\r\n      Categories = names(freq_table_sampled),\r\n      Sample_Freq = as.numeric(freq_table_sampled),\r\n      Sample_Rel_Freq = as.numeric(rel_freq_table_sampled)\r\n    )\r\n    \r\n    return(nrow(table_uploaded )==nrow(table_sampled))\r\n    \r\n  }\r\n  \r\n  \r\n  ##Categorical Data Analysis\r\n  # Frequency Table\r\n  output$frequency_table <- renderTable({\r\n    req(input$variable_option, uploaded_data())\r\n    #req(input$variable_option, input$catstatistics, input$catvar, uploaded_data(), sampled_data1())\r\n    \r\n    if (input$variable_option == \"Categorical Data Analysis\" && input$catstatistics == \"Frequency Table\") \r\n    {\r\n      freq_table_uploaded <- table(uploaded_data()[[input$catvar]])\r\n      rel_freq_table_uploaded <- prop.table(freq_table_uploaded)\r\n      \r\n      freq_table_sampled <- table(sampled_data1()[[input$catvar]])\r\n      rel_freq_table_sampled <- prop.table(freq_table_sampled)\r\n      \r\n      table_uploaded <- data.frame(\r\n        Categories = names(freq_table_uploaded),\r\n        Popn_Freq = as.numeric(freq_table_uploaded),\r\n        Popn_Rel_Freq = as.numeric(rel_freq_table_uploaded)\r\n      )\r\n      \r\n      table_sampled <- data.frame(\r\n        Categories = names(freq_table_sampled),\r\n        Sample_Freq = as.numeric(freq_table_sampled),\r\n        Sample_Rel_Freq = as.numeric(rel_freq_table_sampled)\r\n      )\r\n      \r\n      if (Table_freq()){ \r\n        combined_table <- data.frame(\r\n          Categories = names(freq_table_uploaded),\r\n          Popn_Freq = as.numeric(freq_table_uploaded),\r\n          Popn_Rel_Freq = as.numeric(rel_freq_table_uploaded),\r\n          Sample_Freq = as.numeric(freq_table_sampled),\r\n          Sample_Rel_Freq = as.numeric(rel_freq_table_sampled)\r\n        )\r\n        \r\n        return(combined_table)\r\n      } else    {NULL}\r\n    }\r\n    NULL\r\n  })\r\n  \r\n  \r\n  output$frequency_table1 <- renderTable({\r\n    req(input$variable_option, uploaded_data())\r\n    #req(input$variable_option, input$catstatistics, input$catvar, uploaded_data(), sampled_data1())\r\n    \r\n    if (input$variable_option == \"Categorical Data Analysis\" && input$catstatistics == \"Frequency Table\") \r\n    {\r\n      freq_table_uploaded <- table(uploaded_data()[[input$catvar]])\r\n      rel_freq_table_uploaded <- prop.table(freq_table_uploaded)\r\n      \r\n      table_uploaded <- data.frame(\r\n        Categories = names(freq_table_uploaded),\r\n        Popn_Freq = as.numeric(freq_table_uploaded),\r\n        Popn_Rel_Freq = as.numeric(rel_freq_table_uploaded)\r\n      )\r\n      \r\n      if (!Table_freq()){ \r\n        return(table_uploaded)\r\n      } else    {NULL}\r\n    }\r\n    NULL\r\n  })\r\n  \r\n  output$frequency_table2 <- renderTable({\r\n    req(input$variable_option, uploaded_data())\r\n    #req(input$variable_option, input$catstatistics, input$catvar, uploaded_data(), sampled_data1())\r\n    \r\n    if (input$variable_option == \"Categorical Data Analysis\" && input$catstatistics == \"Frequency Table\") \r\n    {\r\n      freq_table_sampled <- table(sampled_data1()[[input$catvar]])\r\n      rel_freq_table_sampled <- prop.table(freq_table_sampled)\r\n      \r\n      table_sampled <- data.frame(\r\n        Categories = names(freq_table_sampled),\r\n        Sample_Freq = as.numeric(freq_table_sampled),\r\n        Sample_Rel_Freq = as.numeric(rel_freq_table_sampled)\r\n      )\r\n      \r\n      if (!Table_freq()){ \r\n        return(table_sampled)\r\n      } else    {NULL}\r\n    }\r\n    NULL\r\n  })\r\n  \r\n  \r\n  ## Bar charts\r\n  output$bar_chart_population <- renderPlotly({\r\n    req(input$variable_option, uploaded_data())\r\n    #req(input$variable_option, input$catstatistics, input$catvar, uploaded_data(), sampled_data1())\r\n    \r\n    if (input$variable_option == \"Categorical Data Analysis\") {\r\n      if (input$catstatistics == \"Bar Chart\") {\r\n        freq_table_uploaded <- table(uploaded_data()[[input$catvar]])\r\n        bar_data_uploaded <- data.frame(Categories = names(freq_table_uploaded), Frequency = as.numeric(freq_table_uploaded))\r\n        \r\n        plot_ly(bar_data_uploaded, x = ~Categories, y = ~Frequency, type = \"bar\", color = ~Categories) %>%\r\n          layout(title = \"Bar Chart of Population Data\", xaxis = list(title = \"Categories\"), yaxis = list(title = \"Frequency\"))\r\n        \r\n      }\r\n    }\r\n    \r\n  })\r\n  \r\n  output$bar_chart_sample <- renderPlotly({\r\n    req(input$variable_option, uploaded_data())\r\n    #req(input$variable_option, input$catstatistics, input$catvar, uploaded_data(), sampled_data1())\r\n    \r\n    if (input$variable_option == \"Categorical Data Analysis\") {\r\n      if (input$catstatistics == \"Bar Chart\") {\r\n        freq_table_sampled <- table(sampled_data1()[[input$catvar]])\r\n        bar_data_sampled <- data.frame(Categories = names(freq_table_sampled), Frequency = as.numeric(freq_table_sampled))\r\n        \r\n        plot_ly(bar_data_sampled, x = ~Categories, y = ~Frequency, type = \"bar\", color = ~Categories) %>%\r\n          layout(title = \"Bar Chart of Sampled Data\", xaxis = list(title = \"Categories\"), yaxis = list(title = \"Frequency\"))\r\n        \r\n      }\r\n    }\r\n    \r\n  })\r\n  \r\n  \r\n  ## Pie charts\r\n  output$pie_chart_population <- renderPlotly({\r\n    req(input$variable_option, uploaded_data())\r\n    #req(input$variable_option, input$catstatistics, input$catvar, uploaded_data(), sampled_data1())\r\n    \r\n    if (input$variable_option == \"Categorical Data Analysis\") {\r\n      if (input$catstatistics == \"Pie Chart\") {\r\n        freq_table_uploaded <- table(uploaded_data()[[input$catvar]])\r\n        \r\n        pie_data_uploaded <- data.frame(\r\n          Categories = names(freq_table_uploaded),\r\n          Frequencies = as.numeric(freq_table_uploaded)\r\n        )\r\n        \r\n        plot_ly(pie_data_uploaded, labels = ~Categories, values = ~Frequencies, type = \"pie\") %>%\r\n          layout(title = \"Pie Chart of Population Data\")\r\n        \r\n      }\r\n    }\r\n  })\r\n  \r\n  \r\n  output$pie_chart_sample <- renderPlotly({\r\n    req(input$variable_option, uploaded_data())\r\n    #req(input$variable_option, input$catstatistics, input$catvar, uploaded_data(), sampled_data1())\r\n    \r\n    if (input$variable_option == \"Categorical Data Analysis\") {\r\n      if (input$catstatistics == \"Pie Chart\") {\r\n        freq_table_sampled <- table(sampled_data1()[[input$catvar]])\r\n        \r\n        pie_data_sampled <- data.frame(\r\n          Categories = names(freq_table_sampled),\r\n          Frequencies = as.numeric(freq_table_sampled)\r\n        )\r\n        \r\n        plot_ly(pie_data_sampled, labels = ~Categories, values = ~Frequencies, type = \"pie\") %>%\r\n          layout(title = \"Pie Chart of Sampled Data\")\r\n        \r\n      }\r\n    }\r\n  })\r\n  \r\n  \r\n  ### Data transformation; using reactive values in line 193: values\r\n  observe({\r\n    updateSelectizeInput(session, \"trans\", \r\n                         choices = ( if(is.null(R.numericnames())) c(\"To Numeric\" = \"numeric\") \r\n                                     else if (is.null(R.categoricnames())) c( \"To Categorical\" = \"categorical\") \r\n                                     else c( \"To Categorical\" = \"categorical\", \"To Numeric\" = \"numeric\") ))\r\n  }) \r\n  \r\n  \r\n  observe({\r\n    updateSelectizeInput(session, \"var_trans\", \r\n                         choices = c( if(input$trans == \"categorical\") R.numericnames() \r\n                                      else R.categoricnames()  ) )\r\n  })\r\n  \r\n  \r\n  observe({\r\n    updateSelectizeInput(session, \"trans\", \r\n                         choices = ( if(is.null(R.numericnames())) c(\"To Numeric\" = \"numeric\") \r\n                                     else if (is.null(R.categoricnames())) c( \"To Categorical\" = \"categorical\") \r\n                                     else c( \"To Categorical\" = \"categorical\", \"To Numeric\" = \"numeric\") ))\r\n  }) \r\n  \r\n  \r\n  observe({\r\n    updateSelectizeInput(session, \"var_trans\", \r\n                         choices = c( if(input$trans == \"categorical\") R.numericnames() \r\n                                      else R.categoricnames()  ) )\r\n  })\r\n  \r\n  R.transform1 <- reactive({\r\n    if (is.null(uploaded_data())  ) {return(NULL)}\r\n    else{\r\n      colname1 =  case_when( \r\n        input$trans == \"categorical\"~paste(input$var_trans, \"Categorical\", sep = \"_\"),\r\n        input$trans == \"numeric\"~paste(input$var_trans, \"Numeric\", sep = \"_\")\r\n      )\r\n      \r\n      Data1=uploaded_data()\r\n      \r\n      if (input$trans == \"categorical\") trans_x<-as.factor(Data1[,input$var_trans]) else\r\n        trans_x <- as.numeric(type.convert(as.character(Data1[,input$var_trans])))\r\n      #trans_x <- suppressWarnings(as.numeric(as.character(Data1[, input$var_trans])))\r\n      #trans_x <- as.numeric(as.character(Data1[,input$var_trans]))\r\n      \r\n      Data1[, colname1]<-trans_x\r\n      return(Data1) \r\n      \r\n    }\r\n  })\r\n  \r\n  R.transform2 <- reactive({\r\n    if ( is.null(sampled_data1()) ) {return(NULL)}\r\n    else{\r\n      colname2= case_when(\r\n        input$trans == \"categorical\"~paste(input$var_trans, \"Categorical\", sep = \"_\"),\r\n        input$trans == \"numeric\"~paste(input$var_trans, \"Numeric\", sep = \"_\")\r\n      )\r\n      \r\n      Data2=sampled_data1()\r\n      \r\n      if (input$trans == \"categorical\") trans_x<-as.factor(Data2[,input$var_trans]) else\r\n        trans_x <- as.numeric(type.convert(as.character(Data2[,input$var_trans])))\r\n      #trans_x <- suppressWarnings(as.numeric(as.character(Data2[, input$var_trans])))\r\n      #trans_x <- as.numeric(as.character(Data2[,input$var_trans]))\r\n      \r\n      Data2[, colname2]<-trans_x\r\n      return(Data2) \r\n    }\r\n  })\r\n  \r\n  observeEvent(input$savetrans, {\r\n    req(uploaded_data())\r\n    values$dataset1=R.transform1()#%>%as.data.frame()\r\n    values$dataset2=R.transform2()#%>%as.data.frame()\r\n  })\r\n  \r\n  \r\n  ###Some problems with warning message\r\n  output$warning <- renderUI({\r\n    data <- uploaded_data()   #population data\r\n    data1 <- subset(data, data[[input$nonrandom_catvar]] == input$catlevel)\r\n    data2 <- subset(data, data[[input$nonrandom_numvar]] >= input$lower & data[[input$nonrandom_numvar]] <= input$upper)\r\n    \r\n    \r\n    print(nrow(data2))\r\n    \r\n    warning_message <- NULL  # Initializing an empty warning message\r\n    \r\n    if (input$Sampling_methods == \"Random Sampling\") {\r\n      if (input$sample_size_1 > nrow(data) & input$data_option == \"Upload a CSV File\") {\r\n        warning_message <- \"The sample size is larger than the population size. Please choose a smaller size.\"\r\n      }\r\n      \r\n      if (input$sample_size_2 > nrow(data) & input$data_option == \"Random Number Generator\") {\r\n        warning_message <- \"The sample size is larger than the population size. Please choose a smaller size.\"\r\n      }\r\n    }\r\n    \r\n    if (input$Sampling_methods == \"Non-random Sampling\") {\r\n      \r\n      if (input$nonrandom_types == \"a categorical variable\"){\r\n        if (input$sample_size_1 > nrow(data1) ) \r\n        {\r\n          warning_message <- \"The sample size is larger than the population size. Please choose a smaller size.\"\r\n        } \r\n      }\r\n      \r\n      \r\n      if (input$nonrandom_types == \"a numerical variable\"){\r\n        if (input$sample_size_1 > nrow(data2) & input$sample_size_2 > nrow(data2) ) \r\n        {\r\n          warning_message <- \"The sample size is larger than the population size. Please choose a smaller size.\"\r\n        }\r\n      }\r\n      \r\n    }\r\n    \r\n    \r\n    if (length(warning_message) == 0) {\r\n      # If no warning message, return NULL to clear the warning UI\r\n      return(NULL)\r\n    } else {\r\n      # Display the warning message with bold text\r\n      tags$div(\r\n        style = \"color: red; font-weight: bold;\",\r\n        warning_message\r\n      )\r\n    }\r\n  })\r\n  \r\n}  #server ends\r\n\r\n\r\nshinyApp(ui, server)","type":"text"},{"name":"about.md","content":"<style type=\"text/css\">\n  body{\n  font-size: 11pt;\n}\nh1, h2 {\n  text-align: center;\n}\n<\/style>\n\n\n## About this app\n\nFunded by the Innovative Teacher Prep2Practice Grant (2023 -2024), this web app is built by [**Xuemao Zhang**](https://www.esu.edu/mathematics/faculty.cfm) to help users conduct random sampling or random number generation, and basic data analysis.\n\n\n### Usage Instructions\n\n\n* **Choosing Data Input Method**\n  * **Upload a CSV File:** Select the **Upload a CSV File** option and click on **Browse...** in **Step 1** to upload your CSV file. You can choose whether the file contains headers.   The file can be a population data set with several columns or a file with a single column only of the sampling frame, the complete list of the IDs of all population subjects. \n  * **Random Number Generator:** If the sampling frame is a sequence of consecutive integers, you may choose the **Random Number Generator** option, specify the sample size, and selected the **Range Start** and **Range End** for generating random numbers.\n\n* **Sampling Methods**\n  * **Random Sampling:** If you've uploaded a CSV file, select **Random Sampling** and specify the sample size. Click \"<i class=\"fas fa-refresh\"><\/i> **Sample**\" to conduct random sampling.\n  * **Non-Random Sampling:**  This option allows user to conduct a type of nonrandom sampling after you've uploaded a CSV file, choosing a random sample from a specific group based on a categorical variable or a numerical variable.  Select the variable and criteria for sampling and then click \"<i class=\"fas fa-refresh\"><\/i> **Sample**\".\n\n* **Data Analysis:** After you've conducted random sampling or non-random sampling, navigate to the **Data Analysis** tab to compare the population data and the sampled data.\n  * For Numerical Data Analysis, select a variable and choose among **Descriptive Statistics**, **Box plot**, or **Histogram**.\n  * For Categorical Data Analysis, select a variable and choose from **Frequency Table**, **Bar Chart**, or **Pie Chart** options.\n\n\n* **Data Transformation:** Before the above data analysis mentioned, you may need to transform variables between categorical and numerical types.  For example, if you entered the values of a categorical variable as numbers, you can convert the variable back to categorical variable.  Select the variable and transformation type, then click \"<i class=\"fas fa-save\"><\/i> **Save transformation**\".  The transformed variable will be added to both the population data and sampled data.\n\n\n* **Downloading Sampled Data:**  \n  * After you've uploaded a population of IDs or used the Random Number Generator, you may need to download the random numbers by clicking \"<i class=\"fas fa-download\"><\/i> **Download Sampled Data**\" and use it as a sampling frame to conduct sampling survey.\n  * You may also need to download a sampled data to conduct further data analysis using other software packages.\n\n\n### Notes and Recommendations\n\n* **Data Handling:** Ensure to upload a clean and complete CSV file for accurate analysis.\n* **Validation:**  \n  * Make sure that the entered values for sample size are smaller than the population size to avoid errors.\n  * Make sure that both the population data and sampled data are not empty before data analysis.\n\n\nThe Random Sampling Web App is a handy tool for conducting basic sampling and analysis on datasets. Enjoy using the app and exploring the various features to understand your data better.","type":"text"},{"name":"readme.txt","content":"\r\n#Use Shinylive \r\n\r\nlibrary(shinylive)\r\n\r\napp_dir <- 'D:/Random'  # Change this to the directory where your Shiny app files are located\r\nout_dir <- 'C:/docs'  # Change this to the output directory where you want the HTML file to be saved\r\n\r\nexport(appdir = app_dir, destdir = out_dir)\r\n\r\n#Run the following in an R session to serve the app:\r\nhttpuv::runStaticServer(\"C:/docs\")\r\n\r\n\r\n","type":"text"}]
